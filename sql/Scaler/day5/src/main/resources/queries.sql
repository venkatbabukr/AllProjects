--Question: Q2
--------------------------------

-- Acme Studios, a major Hollywood production company, maintains a vast movie database. This database tracks information about movies they've produced, including
-- titles, directors, taglines, and a popularity metric. Understanding movie popularity is crucial for Acme Studios to identify audience preferences and make
-- informed decisions about future productions. By analyzing the most popular movies, streaming services can refine their recommendations and negotiate better
-- content deals.

-- Problem Statement:

-- To gain insights into audience tastes, Acme Studios wants to identify the most popular movies in their database. This can be achieved by analyzing
-- the "popularity" field within the "movies" table.

-- Write a query to find the movie titles, taglines, and directors for the top 5 popular movies.

-- Result:

-- Return the columns 'original_title', 'tagline', and 'director'.

-- Dataset description for movies table:

-- 1) id - tmdb movie id
-- 2) imdb_id - imdb movie id
-- 3) popularity -A numeric quantity specifying the movie's popularity.
-- 4) budget -The budget in which the movie was made.
-- 5) revenue - The worldwide revenue generated by the movie.
-- 6) original_title- The title of the movie
-- 7) cast - The name of the lead and supporting actors.
-- 8) homepage - A link to the homepage of the movie.
-- 9) director - The name of the director of the movie
-- 10) tagline - Movie's tagline.
-- 11) keywords -The keywords or tags related to the movie.
-- 12) overview -A brief description of the movie.
-- 13) runtime -The running time of the movie in minutes.
-- 14) genres -The genres of the movies
-- 15) production_companies-The production house of the movie.
-- 16) release_date -the date on which it was released.
-- 17) vote_count -the count of votes received.
-- 18) vote_average - average ratings the movie received.
-- 19) release_year - the year on which it was released.
select
    original_title, tagline, director
from
    movies
order by
    popularity desc
limit 5;

-- Question Q3
--------------------------------

-- Write an SQL query that retrieves all details (not just revenue) for the movie with the third-highest revenue in the Acme Studios database. This will provide
-- a comprehensive overview of a financially successful film, allowing executives to analyze factors that contributed to its performance and potentially replicate
-- them in future projects.

-- Result:
-- 1. Return all the columns.
-- 2. No two movies have the same revenue. (i.e., all the values in the revenue column are unique).
select
    *
from
    movies
order by
    revenue desc
limit 1 OFFSET 2;

-- Question Q4
--------------------------------

-- Acme Studios, a major Hollywood production company, maintains a vast movie database. This database tracks information about movies they've produced, including
-- titles, directors, and taglines, and is constantly striving to improve the movie-going experience for its audience. One way to achieve this is by understanding
-- which movies resonate most with viewers.

-- While raw vote averages can be informative, they don't necessarily account for the number of votes received. A movie with a high average rating based on a small
-- number of votes may not be as representative of audience sentiment as a movie with a slightly lower average rating but a significantly higher number of votes.
-- This information will help Acme Studios identify movies that are not only highly rated but also generate significant audience engagement, potentially influencing
-- future marketing efforts and content creation strategies.

-- Problem Statement:

-- To address this, Acme Studios wants to calculate a "weighted average rating" that considers both the average rating (vote_average).

-- The formula for weighted average rating is as follows:

-- Formula: (v/(v+m) * R) + (m/(v+m) * C )
-- where m is a constant minimum number of votes = 104
-- C is the mean average vote across all votes = here we can have C as 5.97

-- Write an SQL query to create a new column named "Weighted_avg_rating" based on this formula. Then, we'll retrieve the top 10 movies with the highest weighted
-- average ratings, displaying the movie title ("original_title") and the weighted average rating

-- Result:

-- 1. Return the columns original_title, Weighted_avg_rating
-- 2. Return the output ordered by Weighted_avg_rating in descending order and original_title in ascending order.

select
    original_title,
    round((vote_count/(vote_count+104.0)*vote_average)+(104.0/(vote_count+104.0)*5.97), 2) as weighted_avg_rating
from
    movies
order by
    weighted_avg_rating desc, original_title
limit 10;

-- Explanation of weighted average forumla.
-- The logic with weighted average rating is as follows:
-- (v/(v+m))*R averages the rating on the number of votes received. for very high v, v/(v+m) will be near 1, so, it'll allow picking the actual rating
--             as real rating for the movie.
-- (m/(v+m))*C averages the rating on the minimum number of votes. for very low v, m/(v+m) will be near 1, so, it'll allow picking the baseline mean average
--             votes for the movie.
-- C should be the average rating of all movies in the dataset
-- m (Minimum threshold) can be calculated in following various ways:
--    1. Fixed threshold based on domain knowledge (Here we know how many votes can be considered as minimum number of votes for reliability.
--                                                  Say in cases of movies, we can take 1000)
--    2. Dynamic (Or context-specific) thresholds. Examples:
--           a. blockbuster movies might need a higher m than indie films
--           b. newer items might have lower m values to help them compete fairly with older items that have had more time to accumulate votes.
--    3. Simple statistical measures:
--           3.1 Median-based: Using the median of the number of votes
--           3.2 Percentile-based: Choose the 75th percentile, meaning m would be the number of votes that 75% of items have fewer than
--
--    Remember: Larger m = more conservative, Smaller m = more lineant.

-- Question Q5
--------------------------------

-- Empire Online wants to create a new column named "Book_Description" within their "books" table. This column will combine essential details
-- about each book, including the book name ("book_name"), author ("author"), and price ("book_price").

-- Write a query to display the book description as shown below in the sample output.

-- Result:

-- 1. Return the result table sorted by Book_Description in ascending order.
-- 2. This will provide "Book_Description" information in a clear and organized format. Finally, the results will be sorted alphabetically by book description
-- for easy browsing.
select
    concat('Book Name:', book_name, ',', 'Author:', author, ',', 'Book price:', book_price) as Book_Description
from
    books
order by Book_Description;

-- Question Q6:
--------------------------------

-- Write a SQL query to create a new column named "New_salary" within their "employees" table. This column will reflect the adjusted salary after applying a 20%
-- raise to the current salary ("salary").

-- Steps to calculate the salary increment:

-- Multiply the current salary by the percentage of the increment.
-- Divide the result by 100.
-- Then add the result to the current salary.
-- Name the column as 'New_Salary'
-- Round off the 'New_salary'. Use Round() for this.
-- Result:

-- Return the columns emp_id, name, salary, and 'New_salary'.
-- Order the output by the emp_id in ascending order.
select
    emp_id, name, salary, round(1.2 * salary, 0) as New_salary
from
    employees
order by emp_id

-- Question Q7
--------------------------------

-- Write a query to extract the details of the fourth and fifth highest salary employees from the employees table.

-- Result:

-- 1. No two employees have the same salary.
-- 2. Return the columns employee_number, first_name, last_name, and salary.
-- 3. Return the result ordered by salary in descending order.


select
    employee_number, first_name, last_name, salary
from
    employees
order by
    salary DESC
limit 2 offset 3;

-- Question Q8
--------------------------------

-- Write a query to fetch all attributes of every Japanese city in the city table. The countrycode for Japan is JPN.

-- Result:

-- Return the result table ordered by id column in ascending order.

-- Schema:
-- Table "city" {
--     id SERIAL PRIMARY KEY,
--     name VARCHAR(255) NOT NULL,
--     countrycode VARCHAR(3) NOT NULL,
--     district VARCHAR(50) NOT NULL,
--     population INTEGER NOT NULL
-- }
select
    *
from
    city
where
    countrycode='JPN'
order by id;

-- Question Q9
--------------------------------

-- Acme Studios wants to calculate the "profit percentage" for each film in their database.

-- Write a SQL query to calculate the profit percentage using the columns 'budget' and 'revenue' and save the column as 'Profit_percentage'.

-- Result:

-- 1. Return the columns 'original_title' and 'Profit_percentage'
-- 2. Display all the movies and their percentage up to two decimals based on the new column created.


SELECT
    original_title,
    ROUND((revenue - budget) / budget * 100, 2) AS Profit_percentage
FROM
    movies;

-- Question Q10
--------------------------------

-- Write a query to transform and display the Full Name (first_name and last_name separated by space) of all employees where only the first letter of the Full Name
-- is capital.

-- Result:

-- Return the result ordered by employee_number in ascending order.
select
    employee_number,
    concat(upper(substr(first_name, 1, 1)), lower(substr(first_name, 2)), ' ', lower(last_name)) as 'Full Name'
from
    employees
order by employee_number

-- Question Q11
--------------------------------

-- Write a query to show the name of any students who scored higher than 75 Marks.

-- Result:

-- Return the result table ordered by name in ascending order. If two or more students have the same names then sort them by ascending id.
select
    `name`
from
    students
where
    marks > 75
order by `name`, id;
